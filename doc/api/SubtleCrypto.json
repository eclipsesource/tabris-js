{
  "type": "SubtleCrypto",
  "category": "service",
  "namespace": "global",
  "description": "Provides a subset of the [cryptographic functions](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto) in the SubtleCrypto W3C standard.",
  "constructor": {
    "access": "private"
  },
  "methods": {
    "digest": {
      "description": "Provides the digest value of the given data as an ArrayBuffer. Fo this the method uses the hashing algorithms provided by the operating system.",
      "parameters": [
        {
          "name": "algorithm",
          "type": {
            "union": [
              "'SHA-1'",
              "'SHA-256'",
              "'SHA-384'",
              "'SHA-512'"
            ]
          },
          "description": "A string defining the hash function to use."
        },
        {
          "name": "data",
          "type": {
            "union": [
              "TypedArray",
              "ArrayBuffer"
            ]
          },
          "description": "The data to be digested."
        }
      ],
      "returns": {
        "interface": "Promise",
        "generics": [
          "ArrayBuffer"
        ]
      }
    },
    "deriveKey": [
      {
        "description": "Takes a base key and derives a secret key from it using the Elliptic Curve Diffie-Hellman (ECDH) algorithm.",
        "parameters": [
          {
            "name": "algorithm",
            "type": {
              "map": {
                "name": {
                  "type": "'ECDH'"
                },
                "namedCurve": {
                  "type": "'P-256'"
                },
                "public": {
                  "type": "CryptoKey"
                }
              }
            }
          },
          {
            "name": "baseKey",
            "type": "CryptoKey"
          },
          {
            "name": "derivedKeyAlgorithm",
            "type": {
              "map": {
                "name": {
                  "type": "'AES-GCM'"
                },
                "length": {
                  "type": "number"
                }
              }
            }
          },
          {
            "name": "extractable",
            "type": "boolean"
          },
          {
            "name": "keyUsages",
            "type": "string[]"
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "map": {
                "authPromptTitle": { "type": "string", "optional": true },
                "authPromptMessage": { "type": "string", "optional": true }
              }
            }
          }
        ],
        "returns": {
          "interface": "Promise",
          "generics": [
            "CryptoKey"
          ]
        }
      },
      {
        "description": "Takes a base key and derives a secret key from it using the HKDF algorithm.",
        "parameters": [
          {
            "name": "algorithm",
            "type": {
              "map": {
                "name": {
                  "type": "'HKDF'"
                },
                "hash": {
                  "type": {
                    "union": [
                      "'SHA-1'",
                      "'SHA-256'",
                      "'SHA-384'",
                      "'SHA-512'"
                    ]
                  }
                },
                "salt": {
                  "type": {
                    "union": [
                      "ArrayBuffer",
                      "TypedArray"
                    ]
                  }
                },
                "info": {
                  "type": {
                    "union": [
                      "ArrayBuffer",
                      "TypedArray"
                    ]
                  }
                }
              }
            }
          },
          {
            "name": "baseKey",
            "type": "CryptoKey"
          },
          {
            "name": "derivedKeyAlgorithm",
            "type": {
              "map": {
                "name": {
                  "type": "'AES-GCM'"
                },
                "length": {
                  "type": "number"
                }
              }
            }
          },
          {
            "name": "extractable",
            "type": "boolean"
          },
          {
            "name": "keyUsages",
            "type": "string[]"
          }
        ],
        "returns": {
          "interface": "Promise",
          "generics": [
            "CryptoKey"
          ]
        }
      }
    ],
    "deriveBits": [
      {
        "description": "Takes a base key and derives an array of bits from it using the Elliptic Curve Diffie-Hellman (ECDH) algorithm.",
        "parameters": [
          {
            "name": "algorithm",
            "type": {
              "map": {
                "name": {
                  "type": "'ECDH'"
                },
                "namedCurve": {
                  "type": "'P-256'"
                },
                "public": {
                  "type": "CryptoKey"
                }
              }
            }
          },
          {
            "name": "baseKey",
            "type": "CryptoKey"
          },
          {
            "name": "length",
            "type": "number"
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "map": {
                "authPromptTitle": { "type": "string", "optional": true },
                "authPromptMessage": { "type": "string", "optional": true }
              }
            }
          }
        ],
        "returns": {
          "interface": "Promise",
          "generics": [
            "ArrayBuffer"
          ]
        }
      },
      {
        "description": "Takes a base key and derives an array of bits from it using the HKDF algorithm.",
        "parameters": [
          {
            "name": "algorithm",
            "type": {
              "map": {
                "name": {
                  "type": "'HKDF'"
                },
                "hash": {
                  "type": {
                    "union": [
                      "'SHA-1'",
                      "'SHA-256'",
                      "'SHA-384'",
                      "'SHA-512'"
                    ]
                  }
                },
                "salt": {
                  "type": {
                    "union": [
                      "ArrayBuffer",
                      "TypedArray"
                    ]
                  }
                },
                "info": {
                  "type": {
                    "union": [
                      "ArrayBuffer",
                      "TypedArray"
                    ]
                  }
                }
              }
            }
          },
          {
            "name": "baseKey",
            "type": "CryptoKey"
          },
          {
            "name": "length",
            "type": "number"
          }
        ],
        "returns": {
          "interface": "Promise",
          "generics": [
            "ArrayBuffer"
          ]
        }
      }
    ],
    "importKey": {
      "description": "Takes an external key in a portable format and returns a CryptoKey object that can be used with the SubtleCrypto API. Keys may be in spki or pkcs8 format.",
      "parameters": [
        {
          "name": "format",
          "type": {
            "union": [
              "'spki'",
              "'pkcs8'",
              "'raw'"
            ]
          }
        },
        {
          "name": "keyData",
          "type": {
            "union": [
              "ArrayBuffer",
              "TypedArray"
            ]
          }
        },
        {
          "name": "algorithm",
          "type": {
            "union": [
              {
                "map": {
                  "name": {
                    "type": {
                      "union": ["'ECDH'", "'ECDSA'"]
                    }
                  },
                  "namedCurve": {
                    "type": "'P-256'"
                  }
                }
              },
              {
                "map": {
                  "name": {
                    "type": "'AES-GCM'"
                  }
                }
              },
              "'HKDF'",
              "'AES-GCM'"
            ]
          }
        },
        {
          "name": "extractable",
          "type": "boolean"
        },
        {
          "name": "keyUsages",
          "type": "string[]"
        }
      ],
      "returns": {
        "interface": "Promise",
        "generics": [
          "CryptoKey"
        ]
      }
    },
    "generateKey": {
      "description": "Generates new keys. Currently only supports the Elliptic Curve Diffie-Hellman (ECDH) and Elliptic Curve Digital Signature Algorithm (ECDSA) algorithms to generate key pairs. When `extractable` is set to `true`, the raw key material can be exported using `exportKey`. When `extractable` is set to `false`, for ECDSA and ECDH keys `exportKey` returns an opaque handle to the key in the device's trusted execution environment, and throws for other key formats.",
      "parameters": [
        {
          "name": "algorithm",
          "type": {
            "map": {
              "name": {
                "type": {
                  "union": ["'ECDH'", "'ECDSA'"]
                }
              },
              "namedCurve": {
                "type": "'P-256'"
              }
            }
          }
        },
        {
          "name": "extractable",
          "type": "boolean"
        },
        {
          "name": "keyUsages",
          "type": "string[]"
        },
        {
          "name": "options",
          "optional": true,
          "type": {
            "map": {
              "usageRequiresAuth": { "type": "boolean", "optional": true }
            }
          }
        }
      ],
      "returns": {
        "interface": "Promise",
        "generics": [
          {
            "map": {
              "privateKey": {
                "type": "CryptoKey"
              },
              "publicKey": {
                "type": "CryptoKey"
              }
            }
          }
        ]
      }
    },
    "decrypt": {
      "description": "Decrypts the given raw data. Currently only supports the AES-GCM algorithm.",
      "parameters": [
        {
          "name": "algorithm",
          "type": {
            "map": {
              "name": {
                "type": "'AES-GCM'"
              },
              "iv": {
                "type": {
                  "union": [
                    "ArrayBuffer",
                    "TypedArray"
                  ]
                }
              },
              "tagLength": {
                "type": "number",
                "optional": true
              }
            }
          }
        },
        {
          "name": "key",
          "type": "CryptoKey"
        },
        {
          "name": "data",
          "type": {
            "union": [
              "ArrayBuffer",
              "TypedArray"
            ]
          }
        }
      ],
      "returns": {
        "interface": "Promise",
        "generics": [
          "ArrayBuffer"
        ]
      }
    },
    "encrypt": {
      "description": "Encrypts the given raw data. Currently only supports the AES-GCM algorithm.",
      "parameters": [
        {
          "name": "algorithm",
          "type": {
            "map": {
              "name": {
                "type": "'AES-GCM'"
              },
              "iv": {
                "type": {
                  "union": [
                    "ArrayBuffer",
                    "TypedArray"
                  ]
                }
              },
              "tagLength": {
                "type": "number",
                "optional": true
              }
            }
          }
        },
        {
          "name": "key",
          "type": "CryptoKey"
        },
        {
          "name": "data",
          "type": {
            "union": [
              "ArrayBuffer",
              "TypedArray"
            ]
          }
        }
      ],
      "returns": {
        "interface": "Promise",
        "generics": [
          "ArrayBuffer"
        ]
      }
    },
    "exportKey": {
      "description": "Converts `CryptoKey` instances into a portable format. If the key's `extractable` is set to `true`, returns the raw key material in SPKI format or as raw bytes. If the key's `extractable` is set to `false`, for ECDSA and ECDH keys returns an opaque handle to the key in the device's trusted execution environment, and throws for other key formats.",
      "parameters": [
        {
          "name": "format",
          "type": {
            "union": [
              "'raw'",
              "'spki'"
            ]
          }
        },
        {
          "name": "key",
          "type": "CryptoKey"
        }
      ],
      "returns": {
        "interface": "Promise",
        "generics": [
          "ArrayBuffer"
        ]
      }
    },
    "sign": {
      "description": "Signs the given data. Currently only supports creating ECDSA signatures in DER format.",
      "parameters": [
        {
          "name": "algorithm",
          "type": {
            "map": {
              "name": {
                "type": "'ECDSAinDERFormat'"
              },
              "hash": {
                "type": "'SHA-256'"
              }
            }
          }
        },
        {
          "name": "key",
          "type": "CryptoKey"
        },
        {
          "name": "data",
          "type": {
            "union": [
              "ArrayBuffer",
              "TypedArray"
            ]
          }
        },
        {
          "name": "options",
          "optional": true,
          "type": {
            "map": {
              "authPromptTitle": { "type": "string", "optional": true },
              "authPromptMessage": { "type": "string", "optional": true }
            }
          }
        }
      ],
      "returns": {
        "interface": "Promise",
        "generics": [
          "ArrayBuffer"
        ]
      }
    },
    "verify": {
      "description": "Verifies the given signature against the data. Currently only supports verifying ECDSA signatures in DER format.",
      "parameters": [
        {
          "name": "algorithm",
          "type": {
            "map": {
              "name": {
                "type": "'ECDSAinDERFormat'"
              },
              "hash": {
                "type": "'SHA-256'"
              }
            }
          }
        },
        {
          "name": "key",
          "type": "CryptoKey"
        },
        {
          "name": "signature",
          "type": {
            "union": [
              "ArrayBuffer",
              "TypedArray"
            ]
          }
        },
        {
          "name": "data",
          "type": {
            "union": [
              "ArrayBuffer",
              "TypedArray"
            ]
          }
        }
      ],
      "returns": {
        "interface": "Promise",
        "generics": [
          "boolean"
        ]
      }
    }
  }
}
