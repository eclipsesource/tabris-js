{
  "type": "App",
  "object": "app",
  "extends": "NativeObject",
  "description": "Provides information about the application and allows to handle global application ui events.",
  "constructor": {
    "access": "private",
    "parameters": []
  },
  "properties": {
    "id": {
      "type": "string",
      "readonly": true,
      "description": "Uniquely identifies the app."
    },
    "version": {
      "type": "string",
      "readonly": true,
      "description": "The user facing version number of the app."
    },
    "versionCode": {
      "type": "number",
      "readonly": true,
      "description": "An alternative version number used in app stores to identify different versions of an app. Usually incremented with each release. This property reflects the `versionCode` on Android and `CFBundleVersion` on iOS."
    },
    "pinnedCertificates": {
      "type": "any[]",
      "description": "Enables certificate pinning for HTTP requests. When pinned certificates are defined for a host, connections to this host will only be permitted if the server provides a matching certificate. Connections to hosts that are not in the list are not affected.\n\nCertificate pinning affects the following components: XHR/fetch, WebSockets, image loading and app patching. It does *not* affect WebViews.\n\nThe list of pinned certificates has to be in the form of `[{host: <string>, hash: <string>, algorithm: <RSA2048|RSA4096|ECDSA256>}, ..]`.\n\n- The `host` attribute denotes the host name (including subdomain) of the host to be pinned ([wildcards allowed](https://en.wikipedia.org/wiki/Wildcard_DNS_record)).\n- The `hash` attribute is the base64 encoded sha256 fingerprint of the _subjectPublicKeyInfo_, prefixed with `sha256/`.\n- The `algorithm` attribute denotes the public key algorithm of the SSL certificate and can have the values `RSA2048`, `RSA4096` or `ECDSA256`. This attribute is only required on iOS.\n\nExample: `[{host: 'freegeoip.net', hash: 'sha256/+SVYjThgePRQxQ0e8bWTQDRtPYR/xBRufqyMoeaWteo=', algorithm: 'ECDSA256'}]`\n\nFor further details see https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning."
    },
    "trustedCertificates": {
      "type": "any[]",
      "description": "Adds a set of certificates to validated ssl connections against. The certificates are applied in addition to the system wide default certificates.\n\nThe `ArrayBuffer` entries of the `trustedCertificates` array consist of the bytes of the certificate files. On Android the certificate file has to be a _*.pem_ (Privacy Enhanced Mail) file whereas on iOS  it has to be _*.der_ (Distinguished Encoding Rules) file.",
      "platforms": {
        "windows": false
      }
    },
    "idleTimeoutEnabled": {
      "type": "boolean",
      "default": true,
      "description": "Allows to control the device idle timout. When disabled the device will not go into sleep mode and turn off the screen to safe battery power.\n\nThe `idleTimeoutEnabled` will disable any system wide enabled idle settings while the app is in the foreground.",
      "platforms": {
        "windows": false
      }
    }
  },
  "events": {
    "foreground": {
      "description": "The event is fired when the app starts or when it returns from the background."
    },
    "resume": {
      "description": "Fired when the app is visible and ready to interact with the user. The event is preceded by either `foreground` (the app becomes visible again) or `pause` (the app regains ability to interact with user)."
    },
    "pause": {
      "description": "Fired when the app is not the interaction target of the user anymore. Usually preceded by `resume`."
    },
    "background": {
      "description": "Fired when the app becomes invisible. Either because another app is in the foreground or the user has returned to the home screen."
    },
    "terminate": {
      "description": "Fired when the app is being destroyed. After this callback no more interaction with the app is possible.",
      "platforms": {
        "windows": false
      }
    },
    "keyPress": {
      "description": "Fired when a hardware key is pressed. Note that these events stem from physical hardware, not from the virtual keyboard.\n\nWhen invoking `event.preventDefault()` the key event is not propagated to the widget hierarchy. However, a `TextInput` with focus will still receive the key event.",
      "parameters": {
        "keyCode": {
          "description": "The key code of the key event. It represents the physical key that was pressed, not the Unicode character.",
          "type": "number"
        },
        "character": {
          "description": "The character generated by the specified key and modifier key state combination.",
          "type": "string"
        },
        "shiftKey": {
          "description": "The pressed state of the SHIFT key.",
          "type": "boolean"
        },
        "ctrlKey": {
          "description": "The pressed state of the CTRL key.",
          "type": "boolean"
        },
        "altKey": {
          "description": "The pressed state of the ALT key.",
          "type": "boolean"
        },
        "functionKey": {
          "description": "The pressed state of the FUNCTION key.",
          "type": "boolean"
        },
        "action": {
          "description": "The action of this key event.",
          "type": "'up'|'down'"
        },
        "time": {
          "description": "The time this event occurred, in the android.os.SystemClock#uptimeMillis time base.",
          "type": "number"
        },
        "deviceId": {
          "description": "The id for the device that this event came from. An id of zero indicates that the event didn't come from a physical device and maps to the default keymap. The other numbers are arbitrary and you shouldn't depend on the values.",
          "type": "number"
        },
        "preventDefault": {
          "description": "Call to suppress the key events to be dispatched to the apps widget hierarchy. Note that a `TextInput` with focus will still receive the event and add a character to its text accordingly.",
          "type": "Function",
          "ts_type": "() => void"
        }
      },
      "platforms": {
        "ios": false,
        "windows": false
      }
    },
    "backNavigation": {
      "description": "Fired when a back navigation is invoked by the user.",
      "parameters": {
        "preventDefault": {
          "description": "Call to suppress the default back navigation behavior.",
          "type": "() => void"
        }
      },
      "platforms": {
        "ios": false,
        "windows": false
      }
    }
  },
  "methods": {
    "launch": {
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "description": "The URL to launch."
        }
      ],
      "returns": "Promise<void>",
      "description": "Asks the operating system to open the given URL in an external app. Operating systems usually support a variety of URL schemes including `http`, `https`, `mailto`, `tel`, and `sms`. Apps can also register for custom URL schemes."
    },
    "reload": {
      "parameters": [],
      "description": "Forces the running application to reload the main module and start over.",
      "platforms": {
        "windows": false
      }
    },
    "close": {
      "parameters": [],
      "description": "Shuts down the running application and closes the UI.",
      "platforms": {
        "ios": false,
        "windows": false
      }
    },
    "getResourceLocation": {
      "parameters": [
        {
          "name": "path",
          "type": "string",
          "description": "The path of a resource relative to the application root."
        }
      ],
      "returns": "string",
      "description": "Returns the URL for a given resource that is bundled with the app. Can be used to access app resources like images, videos, etc. Note that these resources can only be accessed in read-only mode."
    },
    "registerFont": {
      "parameters": [
        {
          "name": "alias",
          "type": "string",
          "description": "An identifier for the registered font. The alias can be used in places where a font can be configures, e.g.: `TextView` or `GraphicalContext`"
        },
        {
          "name": "file",
          "type": "string",
          "description": "The font file to register for later use. Similar to images paths, the file path can be absolute, relative or an URL.\n\nOn the Windows platform it is required to provide the font-family name to reference the font in the given file. The font-family name is provided as a fragment postfix to the file name. For example `arial.ttf#Arial` can be used the load a font named 'Arial' from the file 'arial.ttf'. The file also has to be bundled with the app to work, loading it remotely (e.g. via the developer app) will not work."
        }
      ],
      "description": "Allows to register a font to use throughout the app. Once a font is registered its alias can be used to apply the font where ever a font can be configured, e.g. in `TextView` or `GraphicalContext`. Tabris.js currently supports TrueType fonts (*.ttf) and OpenType fonts (*.otf)."
    },
    "installPatch": {
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "description": "The URL to fetch a patch from."
        },
        {
          "name": "callback",
          "type": "(error: Error|null, patch: any|null) => void",
          "description": "A callback function to be called when the installation has finished or failed. In case of a failure, the callback will receive a parameter `error` that contains an Error object. If the installation succeeds, this parameter will be `null` and a second parameter will contain the parsed content of the file `patch.json` from the installed patch."
        }
      ],
      "description": "Installs a patch from the given URL. When the patch is successfully installed, it will remain inactive until the application is reloaded. Not supported on Windows. For more information see [Patching a Tabris.js App](../patch.md)",
      "provisional": true
    }
  },
  "links": [
    {
      "title": "Snippet showing various capabilities of the `App` object",
      "path": "${GITHUB_BRANCH}/snippets/app.js"
    },
    {
      "title": "Snippet to register and use an external font",
      "path": "${GITHUB_BRANCH}/snippets/textview-font-external.js"
    }
  ]
}
