{
  "type": "App",
  "object": "app",
  "extends": "NativeObject",
  "description": "The object `tabris.app` provides information about the application.",
  "properties": {
    "id": {
      "type": "string",
      "description": "Uniquely identifies the app."
    },
    "version": {
      "type": "string",
      "description": "The user facing version number, e.g. '2.1-beta3'."
    },
    "versionCode": {
      "type": "number",
      "description": "An alternative version number used in app stores to identify different versions of an app. Usually incremented with each release. This property reflects the `versionCode` on Android and `CFBundleVersion` on iOS."
    },
    "pinnedCertificates": {
      "type": "any[]",
      "description": "Allows to validate an SSL certificates when performing HTTP requests. While pinning a certificate the following components match the certificate: XHR/fetch, WebSockets, image loading and app patching.<br/><br/>The list of pinned certificates has to be in the form of `[{domain: <string>, hash: <string>, algorithm: <RSA2048|RSA4096|ECDSA256>}, ..]`. The `domain` denotes the domain and subdomain ([wildcards allowed](https://en.wikipedia.org/wiki/Wildcard_DNS_record)). The `hash` is a base64 encoded sha256 fingerprint of the _subjectPublicKeyInfo_. The `algorithm` denotes the public key algorithm of the SSL certificate and can have the values `RSA2048`, `RSA4096` or `ECDSA256`. It is required on iOS.<br /><br/>Example: `[{domain: 'freegeoip.net', hash: 'sha256/eTPz+5X4FcoK5fW+I0Wt/9y2vOkU3UMmVnDs7yGUJf8', algorithm: 'RSA4096'}];`<br /><br />For further details see https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning.<br /><br/>Secure Transport's TLS session cache has a timeout of 10 minutes (Resumed TLS handshake)."
    }
  },
  "events": {
    "foreground": {
      "parameters": [
        {"name": "app", "type": "App"}
      ],
      "description": "Fired when the app becomes visible. The event is only fired after the app has been brought to the background. Not during app startup."
    },
    "resume": {
      "parameters": [
        {"name": "app", "type": "App"}
      ],
      "description": "Fired when the app is visible and ready to interact with the user. The event is preceded by either `foreground` (the app becomes visible again) or `pause` (the app regains ability to interact with user)."
    },
    "pause": {
      "parameters": [
        {"name": "app", "type": "App"}
      ],
      "description": "Fired when the app is not the interaction target of the user anymore. Usually preceded by `resume`."
    },
    "background": {
      "parameters": [
        {"name": "app", "type": "App"}
      ],
      "description": "Fired when the app becomes invisible. Either because another app is in the foreground or the user has returned to the home screen."
    },
    "terminate": {
      "parameters": [
        {"name": "app", "type": "App"}
      ],
      "description": "Fired when the app is being destroyed. After this callback no more interaction with the app is possible."
    },
    "backnavigation": {
      "parameters": [
        {"name": "app", "type": "App"},
        {"name": "event", "type": "Object"}
      ],
      "description": "Fired when the back button is pressed on Android. To suppress the default back navigation behavior, call `event.preventDefault()`."
    }
  },
  "methods": {
    "reload": [
      {
        "parameters": [],
        "description": "Forces the running application to reload the main module and start over."
      }
    ],
    "getResourceLocation": [
      {
        "parameters": [{
          "name": "path",
          "type": "string",
          "description": "The path of a resource relative to the application root."
        }],
        "returns": "string",
        "description": "Returns the URL for a given resource that is bundled with the app. Can be used to access app resources like images, videos, etc. Note that these resources can only be accessed in read-only mode."
      }
    ],
    "installPatch": [
      {
        "parameters": [
          {
            "name": "url",
            "type": "string",
            "description": "The URL to fetch a patch from."
          },
          {
            "name": "callback",
            "type": "Function",
            "description": "A callback function to be called when the installation has finished or failed. In case of a failure, the callback will receive a parameter `error` that contains an Error object. If the installation succeeds, this parameter will be `undefined` and a second parameter will contain the parsed content of the file `patch.json` from the installed patch."
          }
        ],
        "description": "Installs a patch from the given URL. When the patch is successfully installed, it will remain inactive until the application is reloaded.",
        "provisional": true
      }
    ]
  }
}
