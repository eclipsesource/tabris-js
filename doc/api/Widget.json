{
  "type": "Widget",
  "category": "widget",
  "description": "Base class for all widgets",
  "extends": "NativeObject",
  "generics": [
    {
      "name": "TData",
      "extends": "object",
      "default": "any",
      "description": "The type of the [`data`](#data) object."
    }
  ],
  "constructor": {
    "access": "protected",
    "parameters": [
      {
        "name": "properties",
        "type": {
          "interface": "Properties",
          "generics": [
            "Widget"
          ]
        },
        "optional": true,
        "description": "Sets all key-value pairs in the properties object as widget properties."
      }
    ]
  },
  "methods": {
    "parent": [
      {
        "parameters": [],
        "returns": "Composite",
        "description": "Returns the parent of this widget or `null` if this widget is not appended to a parent."
      },
      {
        "generics": [
          {
            "name": "Result",
            "extends": "Composite",
            "default": "Composite"
          }
        ],
        "parameters": [
          {
            "name": "selector",
            "type": "Selector",
            "ts_type": "ParentSelector<Composite, Result>",
            "description": "A selector expression or a predicate function to filter the results."
          }
        ],
        "returns": "Result",
        "description": "Returns the first (nearest) parent of this widget that matches the given selector, or `null` if no parent matches."
      }
    ],
    "appendTo": {
      "parameters": [
        {
          "name": "parent",
          "type": "Composite"
        }
      ],
      "returns": "this",
      "description": "Appends this widget to the given parent. The parent widget must support children (extending *Composite*). If the widget already has a parent, it is removed from the old parent."
    },
    "insertBefore": {
      "parameters": [
        {
          "name": "widget",
          "type": "Widget"
        }
      ],
      "returns": "this",
      "description": "Inserts this widget directly before the given widget. If the widget already has a parent, it is removed from the old parent."
    },
    "insertAfter": {
      "parameters": [
        {
          "name": "widget",
          "type": "Widget"
        }
      ],
      "returns": "this",
      "description": "Inserts this widget directly after the given widget. If the widget already has a parent, it is removed from the old parent."
    },
    "detach": {
      "parameters": [],
      "returns": "this",
      "description": "Removes this widget from its parent."
    },
    "siblings": [
      {
        "generics": [
          {
            "name": "Result",
            "extends": "Widget",
            "default": "Widget"
          }
        ],
        "parameters": [
          {
            "name": "selector",
            "type": "Selector",
            "ts_type": "Selector<Widget, Result>",
            "optional": true,
            "description": "A selector expression or a predicate function to filter the results."
          }
        ],
        "returns": "WidgetCollection",
        "ts_returns": "WidgetCollection<Result>",
        "description": "Returns a (possibly empty) collection of all siblings of this widget that match the given selector."
      }
    ],
    "animate": {
      "parameters": [
        {
          "name": "properties",
          "type": {
            "map": {
              "transform": {
                "type": "Transformation",
                "optional": true
              },
              "opacity": {
                "type": "number",
                "optional": true
              }
            }
          },
          "description": "The properties and target values to animate."
        },
        {
          "name": "options",
          "type": "AnimationOptions",
          "description": "Configures the animation itself."
        }
      ],
      "returns": "Promise",
      "ts_returns": "Promise<void>",
      "description": "Starts an animation that transforms the given properties from their current values to the given ones. Supported properties are *transform* and *opacity*. Returns a promise that is resolved once the animation is completed and is rejected if the animation is aborted."
    },
    "dispose": {
      "parameters": [],
      "description": "Removes this widget from its parent and destroys it. Also disposes of all its children. Triggers a `remove` event on the parent and a `dispose` event on itself. The widget can no longer be used."
    },
    "isDisposed": {
      "parameters": [],
      "returns": "boolean",
      "description": "Returns `true` if the widget has been disposed, otherwise `false`."
    },
    "accessibilityFocus": {
      "parameters": [],
      "returns": "this",
      "description": "Sets focus on the widget when accessibility services are enabled, helping screen readers highlight the element for improved navigation."
    },
    "_setParent": {
      "protected": true,
      "parameters": [
        {
          "name": "parent",
          "type": "Composite"
        },
        {
          "name": "index",
          "type": "number",
          "optional": true
        }
      ],
      "description": "Sets the parent of the widget. If an index is given the widget will be inserted at that position."
    },
    "[JSX.jsxFactory]": {
      "description": "This function is called to create JSX widget elements. You may override it in your own subclass to create custom JSX behavior. **The function is called with the JSXProcessor as the context (`this`).**",
      "parameters": [
        {
          "name": "this",
          "type": "tabris.JsxProcessor"
        },
        {
          "name": "type",
          "type": "{new (...args: any[]): any }"
        },
        {
          "name": "attributes",
          "type": "object"
        }
      ],
      "returns": "any",
      "ts_only": true
    }
  },
  "properties": {
    "id": {
      "type": "string",
      "description": "A string to identify the widget by using selectors. IDs are optional. It is strongly recommended that they are unique within any component."
    },
    "class": {
      "type": "string",
      "description": "A class name or a whitespace separated list of class names to identify the widget. Class names are arbitrary strings that describe a state or a category and help to select widgets using a selector expression. A class name may only contain alphanumeric characters, `_` and `-`. Class names can also be added or removed using the field `classList`."
    },
    "classList": {
      "type": {
        "interface": "Array",
        "generics": [
          "string"
        ]
      },
      "description": "Provides convenient access to the list of class names set to this widget. Class names can either be set using the `class` property or by modifying the `classList` directly."
    },
    "enabled": {
      "type": "boolean",
      "default": "true",
      "description": "Whether the widget can be interacted with."
    },
    "excludeFromLayout": {
      "type": "boolean",
      "default": "false",
      "description": "If set to true the widget will be invisible and ignored in the layout of the parent. Visually it is treated like it was not attached to its parent, but it will still included in the return value of `children()`."
    },
    "visible": {
      "type": "boolean",
      "default": "true",
      "description": "If set to false the widget will be invisible, but still occupy space in the parents layout. Visually it is treated like a widget with an `opacity` of `0`, but in addition the widget can also not be interacted with anymore."
    },
    "layoutData": {
      "type": "LayoutDataValue",
      "description": "Provides information for a widget to be used by the parent when determining its size and position. While this property accepts any valid LayoutData expression (see ${doc:LayoutDataValue}), it will always return an instance of the class [LayoutData](./LayoutData.md).\n\n Widget provides an alias property for each property of LayoutData. Setting these properties will change the value of the `layoutData` property, while getting them is the same as accessing them via the `layoutData` property. I.e. `widget.left === widget.layoutData.left`.\n\nThere are multiple presets for layoutData available as static properties on the `LayoutData` class: [center](./LayoutData.md#center)`, [stretch](./LayoutData.md#stretch)`, [stretchX](./LayoutData.md#stretchx)` and [stretchY](./LayoutData.md#stretchy)`. They may be set directly (`new TextView({layoutData: LayoutData.stretch});`), via string (e.g. `new TextView({layoutData: 'stretch'});`), or in JSX via a special shorthand syntax: `<TextView stretch/>`. The presets can be merged with widget properties, e.g. `<TextView stretch left={10}/>` or `<TextView stretchX centerY/>`",
      "default": "LayoutData"
    },
    "left": {
      "type": "ConstraintValue",
      "description": "The position of the widget's left edge relative to the parent or a sibling widget.",
      "default": "'auto'"
    },
    "right": {
      "type": "ConstraintValue",
      "description": "The position of the widget's right edge relative to the parent or a sibling widget.",
      "default": "'auto'"
    },
    "top": {
      "type": "ConstraintValue",
      "description": "The position of the widget's top edge relative to the parent or a sibling widget.",
      "default": "'auto'"
    },
    "bottom": {
      "type": "ConstraintValue",
      "description": "The position of the widget's bottom edge relative to the parent or a sibling widget.",
      "default": "'auto'"
    },
    "width": {
      "type": {
        "union": [
          "Dimension",
          "'auto'"
        ]
      },
      "description": "The width of the widget.",
      "default": "'auto'"
    },
    "height": {
      "type": {
        "union": [
          "Dimension",
          "'auto'"
        ]
      },
      "description": "The height of the widget.",
      "default": "'auto'"
    },
    "centerX": {
      "type": {
        "union": [
          "Offset",
          "'auto'",
          "true"
        ]
      },
      "description": "The horizontal position of the widget's center relative to the parent's center. Value `true` is treated like `0` and puts it at the exact center without offset.",
      "default": "'auto'"
    },
    "centerY": {
      "type": {
        "union": [
          "Offset",
          "'auto'",
          "true"
        ]
      },
      "description": "The vertical position of the widget's center relative to the parent's center. Value `true` is treated like `0` and puts it at the exact center without offset.",
      "default": "'auto'"
    },
    "baseline": {
      "type": {
        "union": [
          "SiblingReferenceValue",
          "'auto'",
          "true"
        ]
      },
      "description": "The vertical position of the widget's baseline relative to a sibling widget. Value `true` is treated like `'prev()'` and aligns it with the previous sibling.",
      "default": "'auto'"
    },
    "padding": {
      "type": {
        "union": [
          "BoxDimensions",
          "null"
        ]
      },
      "const": true,
      "description": "Additional space to add inside the widgets bounds."
    },
    "elevation": {
      "type": "number",
      "description": "The position of the widget on the z-axis. Setting an `elevation` casts a shadow in the shape of the widget.\n\nTo have the shadow properly applied on Android it is required to set the `background` on the widget as well."
    },
    "cornerRadius": {
      "type": "number",
      "description": "Configure a widget to have equally rounded corners. The widget content is clipped by the rounded corners."
    },
    "bounds": {
      "type": "Bounds",
      "readonly": true,
      "description": "The actual location and size of the widget, relative to its parent."
    },
    "absoluteBounds": {
      "type": "Bounds",
      "readonly": true,
      "noChangeEvent": true,
      "description": "The actual location and size of the widget, relative to contentView."
    },
    "background": {
      "type": {
        "union": [
          "LinearGradientValue",
          "ColorValue",
          "ImageValue"
        ]
      },
      "description": "The background of the widget. If given a plain string it is interpreted first as a gradient, then as a color, and finally as an image path, whichever passes first. Use object literals or instances of `LinearGradient`, `Color` or `Image` to avoid any ambiguity."
    },
    "opacity": {
      "type": "number",
      "default": "1",
      "description": "Opacity of the entire widget, in the range `[0..1]`. Can be used for fade animations."
    },
    "transform": {
      "type": "Transformation",
      "description": "Modifications to the widget's shape, size, or position. Can be used for animations. **Note:** In Android the *transform* property does not affect the *bounds* property, while it does so in iOS."
    },
    "highlightOnTouch": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the widget should show visual feedback while touched. Enabling `highlightOnTouch` will not prevent the touch event from being propagated to the parent widget."
    },
    "data": {
      "type": "TData",
      "description": "A general-purpose property that may be set to any object. Unlike other properties, `data` forwards change events from the object it contains. As it is initialized with an empty instance of ${doc:ObservableData}, modifying this initial `data` object also causes a ${doc:PropertyChangedEvent} for `data` to be fired.\n\n**Important:** If `data` is assigned a plain object, that object will be converted to an ${doc:ObservableData} instance, *so the original object will not be identical with the new `data` value*. If set to any other object the new value will be the same instance.\n\n When set as an attribute (via JSX or a widget factory) it has a special treatment: Unlike other properties it is set *after* the listeners have been registered. This is so to allow passing a data change listener (via 'onDataChanged' attribute) that will be invoked for the initial data value immediately."
    },
    "accessibilityHidden": {
      "type": "boolean",
      "default": "false",
      "description": "Hides the widget from accessibility services, preventing screen readers from announcing it when active."
    },
    "accessibilityLabel": {
      "type": "string",
      "description": "Provides a textual description of the widget for screen readers, describing its purpose or function to visually impaired users."
    }
  },
  "events": {
    "tap": {
      "description": "Fired once when a finger briefly touched the widget.",
      "parameters": {
        "touches": {
          "description": "Touch coordinates relative to the origin coordinates of the widget.",
          "type": {
            "tuple": [
              {
                "map": {
                  "x": {
                    "type": "number"
                  },
                  "y": {
                    "type": "number"
                  }
                }
              }
            ]
          }
        }
      }
    },
    "longPress": {
      "description": "Fired after pressing a widget for a specific amount of time (about a second), and again on lifting the finger.",
      "parameters": {
        "state": {
          "description": "'start' when the widget has been hold down long enough, 'end' when the finger has been lifted and 'cancel' when the gesture has been interrupted.",
          "type": {
            "union": [
              "'start'",
              "'end'",
              "'cancel'"
            ]
          }
        },
        "touches": {
          "description": "Touch coordinates relative to the origin coordinates of the widget.",
          "type": {
            "tuple": [
              {
                "map": {
                  "x": {
                    "type": "number"
                  },
                  "y": {
                    "type": "number"
                  }
                }
              }
            ]
          }
        }
      }
    },
    "pan": {
      "description": "Fired continuously after a finger touching the widget moved for a certain distance.",
      "parameters": {
        "state": {
          "description": "'start' when the finger starts moving, 'change' while the finger is moving, 'end' when the finger has been lifted and 'cancel' when the gesture has been interrupted.",
          "type": {
            "union": [
              "'start'",
              "'change'",
              "'end'",
              "'cancel'"
            ]
          }
        },
        "touches": {
          "description": "Touch coordinates relative to the origin coordinates of the widget.",
          "type": {
            "tuple": [
              {
                "map": {
                  "x": {
                    "type": "number"
                  },
                  "y": {
                    "type": "number"
                  }
                }
              }
            ]
          }
        },
        "translationX": {
          "description": "Current horizontal touch offset relative to the first touch.",
          "type": "number"
        },
        "translationY": {
          "description": "Current vertical touch offset relative to the first touch.",
          "type": "number"
        },
        "velocityX": {
          "description": "Current horizontal velocity in pixels per second.",
          "type": "number"
        },
        "velocityY": {
          "description": "Current vertical velocity in pixels per second.",
          "type": "number"
        }
      }
    },
    "panUp": {
      "eventObject": "WidgetPanEvent",
      "description": "Fired when a finger starts moving up.",
      "parameters": {
        "state": {
          "description": "'start' when the finger starts moving, 'change' while the finger is moving, 'end' when the finger has been lifted and 'cancel' when the gesture has been interrupted.",
          "type": {
            "union": [
              "'start'",
              "'change'",
              "'end'",
              "'cancel'"
            ]
          }
        },
        "touches": {
          "description": "Touch coordinates relative to the origin coordinates of the widget.",
          "type": {
            "tuple": [
              {
                "map": {
                  "x": {
                    "type": "number"
                  },
                  "y": {
                    "type": "number"
                  }
                }
              }
            ]
          }
        },
        "translationX": {
          "description": "Current horizontal touch offset relative to the first touch.",
          "type": "number"
        },
        "translationY": {
          "description": "Current vertical touch offset relative to the first touch.",
          "type": "number"
        },
        "velocityX": {
          "description": "Current horizontal velocity in pixels per second.",
          "type": "number"
        },
        "velocityY": {
          "description": "Current vertical velocity in pixels per second.",
          "type": "number"
        }
      }
    },
    "panDown": {
      "eventObject": "WidgetPanEvent",
      "description": "Fired when a finger starts moving down.",
      "parameters": {
        "state": {
          "description": "'start' when the finger starts moving, 'change' while the finger is moving, 'end' when the finger has been lifted and 'cancel' when the gesture has been interrupted.",
          "type": {
            "union": [
              "'start'",
              "'change'",
              "'end'",
              "'cancel'"
            ]
          }
        },
        "touches": {
          "description": "Touch coordinates relative to the origin coordinates of the widget.",
          "type": {
            "tuple": [
              {
                "map": {
                  "x": {
                    "type": "number"
                  },
                  "y": {
                    "type": "number"
                  }
                }
              }
            ]
          }
        },
        "translationX": {
          "description": "Current horizontal touch offset relative to the first touch.",
          "type": "number"
        },
        "translationY": {
          "description": "Current vertical touch offset relative to the first touch.",
          "type": "number"
        },
        "velocityX": {
          "description": "Current horizontal velocity in pixels per second.",
          "type": "number"
        },
        "velocityY": {
          "description": "Current vertical velocity in pixels per second.",
          "type": "number"
        }
      }
    },
    "panLeft": {
      "eventObject": "WidgetPanEvent",
      "description": "Fired when a finger starts moving left.",
      "parameters": {
        "state": {
          "description": "'start' when the finger starts moving, 'change' while the finger is moving, 'end' when the finger has been lifted and 'cancel' when the gesture has been interrupted.",
          "type": {
            "union": [
              "'start'",
              "'change'",
              "'end'",
              "'cancel'"
            ]
          }
        },
        "touches": {
          "description": "Touch coordinates relative to the origin coordinates of the widget.",
          "type": {
            "tuple": [
              {
                "map": {
                  "x": {
                    "type": "number"
                  },
                  "y": {
                    "type": "number"
                  }
                }
              }
            ]
          }
        },
        "translationX": {
          "description": "Current horizontal touch offset relative to the first touch.",
          "type": "number"
        },
        "translationY": {
          "description": "Current vertical touch offset relative to the first touch.",
          "type": "number"
        },
        "velocityX": {
          "description": "Current horizontal velocity in pixels per second.",
          "type": "number"
        },
        "velocityY": {
          "description": "Current vertical velocity in pixels per second.",
          "type": "number"
        }
      }
    },
    "panRight": {
      "eventObject": "WidgetPanEvent",
      "description": "Fired when a finger starts moving right.",
      "parameters": {
        "state": {
          "description": "'start' when the finger starts moving, 'change' while the finger is moving, 'end' when the finger has been lifted and 'cancel' when the gesture has been interrupted.",
          "type": {
            "union": [
              "'start'",
              "'change'",
              "'end'",
              "'cancel'"
            ]
          }
        },
        "touches": {
          "description": "Touch coordinates relative to the origin coordinates of the widget.",
          "type": {
            "tuple": [
              {
                "map": {
                  "x": {
                    "type": "number"
                  },
                  "y": {
                    "type": "number"
                  }
                }
              }
            ]
          }
        },
        "translationX": {
          "description": "Current horizontal touch offset relative to the first touch.",
          "type": "number"
        },
        "translationY": {
          "description": "Current vertical touch offset relative to the first touch.",
          "type": "number"
        },
        "velocityX": {
          "description": "Current horizontal velocity in pixels per second.",
          "type": "number"
        },
        "velocityY": {
          "description": "Current vertical velocity in pixels per second.",
          "type": "number"
        }
      }
    },
    "panHorizontal": {
      "eventObject": "WidgetPanEvent",
      "description": "Fired when a finger starts moving left or right.",
      "parameters": {
        "state": {
          "description": "'start' when the finger starts moving, 'change' while the finger is moving, 'end' when the finger has been lifted and 'cancel' when the gesture has been interrupted.",
          "type": {
            "union": [
              "'start'",
              "'change'",
              "'end'",
              "'cancel'"
            ]
          }
        },
        "touches": {
          "description": "Touch coordinates relative to the origin coordinates of the widget.",
          "type": {
            "tuple": [
              {
                "map": {
                  "x": {
                    "type": "number"
                  },
                  "y": {
                    "type": "number"
                  }
                }
              }
            ]
          }
        },
        "translationX": {
          "description": "Current horizontal touch offset relative to the first touch.",
          "type": "number"
        },
        "translationY": {
          "description": "Current vertical touch offset relative to the first touch.",
          "type": "number"
        },
        "velocityX": {
          "description": "Current horizontal velocity in pixels per second.",
          "type": "number"
        },
        "velocityY": {
          "description": "Current vertical velocity in pixels per second.",
          "type": "number"
        }
      }
    },
    "panVertical": {
      "eventObject": "WidgetPanEvent",
      "description": "Fired when a finger starts moving up or down.",
      "parameters": {
        "state": {
          "description": "'start' when the finger starts moving, 'change' while the finger is moving, 'end' when the finger has been lifted and 'cancel' when the gesture has been interrupted.",
          "type": {
            "union": [
              "'start'",
              "'change'",
              "'end'",
              "'cancel'"
            ]
          }
        },
        "touches": {
          "description": "Touch coordinates relative to the origin coordinates of the widget.",
          "type": {
            "tuple": [
              {
                "map": {
                  "x": {
                    "type": "number"
                  },
                  "y": {
                    "type": "number"
                  }
                }
              }
            ]
          }
        },
        "translationX": {
          "description": "Current horizontal touch offset relative to the first touch.",
          "type": "number"
        },
        "translationY": {
          "description": "Current vertical touch offset relative to the first touch.",
          "type": "number"
        },
        "velocityX": {
          "description": "Current horizontal velocity in pixels per second.",
          "type": "number"
        },
        "velocityY": {
          "description": "Current vertical velocity in pixels per second.",
          "type": "number"
        }
      }
    },
    "swipeUp": {
      "eventObject": "WidgetSwipeEvent",
      "description": "Fired when a finger moves up quickly.",
      "parameters": {
        "touches": {
          "description": "Touch coordinates relative to the origin coordinates of the widget.",
          "type": {
            "tuple": [
              {
                "map": {
                  "x": {
                    "type": "number"
                  },
                  "y": {
                    "type": "number"
                  }
                }
              }
            ]
          }
        }
      }
    },
    "swipeDown": {
      "eventObject": "WidgetSwipeEvent",
      "description": "Fired when a finger moves down quickly.",
      "parameters": {
        "touches": {
          "description": "Touch coordinates relative to the origin coordinates of the widget.",
          "type": {
            "tuple": [
              {
                "map": {
                  "x": {
                    "type": "number"
                  },
                  "y": {
                    "type": "number"
                  }
                }
              }
            ]
          }
        }
      }
    },
    "swipeLeft": {
      "eventObject": "WidgetSwipeEvent",
      "description": "Fired when a finger moves left quickly.",
      "parameters": {
        "touches": {
          "description": "Touch coordinates relative to the origin coordinates of the widget.",
          "type": {
            "tuple": [
              {
                "map": {
                  "x": {
                    "type": "number"
                  },
                  "y": {
                    "type": "number"
                  }
                }
              }
            ]
          }
        }
      }
    },
    "swipeRight": {
      "eventObject": "WidgetSwipeEvent",
      "description": "Fired when a finger moves right quickly.",
      "parameters": {
        "touches": {
          "description": "Touch coordinates relative to the origin coordinates of the widget.",
          "type": {
            "tuple": [
              {
                "map": {
                  "x": {
                    "type": "number"
                  },
                  "y": {
                    "type": "number"
                  }
                }
              }
            ]
          }
        }
      }
    },
    "touchStart": {
      "eventObject": "WidgetTouchEvent",
      "description": "Fired when a widget is touched. See [Touch Events](../touch.md).",
      "parameters": {
        "touches": {
          "description": "Touch coordinates relative to the origin coordinates of the widget.",
          "type": {
            "tuple": [
              {
                "map": {
                  "x": {
                    "type": "number"
                  },
                  "y": {
                    "type": "number"
                  },
                  "absoluteX": {
                    "type": "number"
                  },
                  "absoluteY": {
                    "type": "number"
                  }
                }
              }
            ]
          }
        }
      }
    },
    "touchMove": {
      "eventObject": "WidgetTouchEvent",
      "description": "Fired repeatedly while swiping across the screen.",
      "parameters": {
        "touches": {
          "description": "Touch coordinates relative to the origin coordinates of the widget.",
          "type": {
            "tuple": [
              {
                "map": {
                  "x": {
                    "type": "number"
                  },
                  "y": {
                    "type": "number"
                  },
                  "absoluteX": {
                    "type": "number"
                  },
                  "absoluteY": {
                    "type": "number"
                  }
                }
              }
            ]
          }
        }
      }
    },
    "touchEnd": {
      "eventObject": "WidgetTouchEvent",
      "description": "Fired when a touch ends on the same widget than it started on.",
      "parameters": {
        "touches": {
          "description": "Touch coordinates relative to the origin coordinates of the widget.",
          "type": {
            "tuple": [
              {
                "map": {
                  "x": {
                    "type": "number"
                  },
                  "y": {
                    "type": "number"
                  },
                  "absoluteX": {
                    "type": "number"
                  },
                  "absoluteY": {
                    "type": "number"
                  }
                }
              }
            ]
          }
        }
      }
    },
    "touchCancel": {
      "eventObject": "WidgetTouchEvent",
      "description": "Fired instead of touchEnd when the touch ends on another widget than it started on.",
      "parameters": {
        "touches": {
          "description": "Touch coordinates relative to the origin coordinates of the widget.",
          "type": {
            "tuple": [
              {
                "map": {
                  "x": {
                    "type": "number"
                  },
                  "y": {
                    "type": "number"
                  },
                  "absoluteX": {
                    "type": "number"
                  },
                  "absoluteY": {
                    "type": "number"
                  }
                }
              }
            ]
          }
        }
      }
    },
    "resize": {
      "description": "Fired when the widget's size has changed.",
      "parameters": {
        "left": {
          "description": "The horizontal offset from the parent's left edge in dip.",
          "type": "number"
        },
        "top": {
          "description": "The vertical offset from the parent's top edge in dip.",
          "type": "number"
        },
        "width": {
          "description": "The width of the widget in dip.",
          "type": "number"
        },
        "height": {
          "description": "The height of the widget in dip.",
          "type": "number"
        }
      }
    },
    "dispose": {
      "description": "Fired when the widget is about to be disposed. At this point the widget and its children are still accessible."
    }
  },
  "links": [
    {
      "title": "Understanding layouts in Tabris.js",
      "path": "../layout.md"
    },
    {
      "title": "Understanding gesture events in Tabris.js",
      "path": "../touch.md"
    },
    {
      "title": "A `Widget` with padding",
      "snippet": "widget-padding.jsx"
    },
    {
      "title": "A card style `Widget` with corner radius and elevation",
      "snippet": "widget-cornerradius.jsx"
    },
    {
      "title": "A `Widget` with a linear-gradient background",
      "snippet": "widget-lineargradient.js"
    },
    {
      "title": "Using touch events on a `Widget`",
      "snippet": "widget-longpress-to-drag.js"
    }
  ],
  "relatedTypes": {
    "Dimension": "dimension",
    "BoxDimensions": "boxdimensions",
    "Bounds": "bounds",
    "AnimationOptions": "animationoptions",
    "Transformation": "transformation",
    "Properties": "propertieswidget"
  }
}
